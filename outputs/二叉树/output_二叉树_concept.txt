二叉树（Binary Tree）是树形结构的一种，是每个结点最多只有两个子树的树结构。通常子树被称作“左子树”（left subtree）和“右子树”（right subtree）。二叉树常被用于实现二叉查找树和二叉堆。
二叉树的性质
二叉树的性质（基本性质）
1.二叉树第i层的最大结点数为2i-1。
2.深度为k的二叉树最多有2k-1个结点。
3.对于任何一棵非空二叉树T，如果叶子结点的个数为N0，度为2的结点总数为N2，则：N0 = N2 + 1。
4.具有n个结点的完全二叉树的深度为log2(n+1)。
5.如果对完全二叉树从上到下从左到右进行编号，对于任意结点i，有：
若i=1，则结点i是二叉树的根，无双亲；若i>1，则其双亲为i/2，左右孩子分别为2i和2i+1。
6.具有n个结点的完全二叉树的结点按层次从上到下从左到右编号为1~n，则对任一结点i，有：
若i=1，则为根，无双亲；若i>1，则其双亲为i/2，左右孩子分别为2i和2i+1。
二叉树的存储结构
1.顺序存储：
对于完全二叉树，用一维数组存储二叉树。
2.链式存储：
对于二叉树，采用链式存储结构，用两个链表分别存储左右子树的指针。
二叉树的遍历
1.前序遍历（preorder traversal）：先访问根结点，然后前序遍历左子树，最后前序遍历右子树。
2.中序遍历（inorder traversal）：先中序遍历左子树，然后访问根结点，最后中序遍历右子树。
3.后序遍历（postorder traversal）：先后序遍历左子树，然后后序遍历右子树，最后访问根结点。
4.层序遍历（level order traversal）：从根结点开始，自上而下，自左向右访问每一个结点。
二叉树的二叉链表存储表示
在二叉链表中，每个结点包含三个域：数据域，左孩子域，右孩子域。
二叉树的二叉树的创建
1.先序遍历：先创建根结点，然后递归创建左子树，最后递归创建右子树。
2.中序遍历：先递归创建左子树，然后创建根结点，最后递归创建右子树。
3.后序遍历：先递归创建左子树，然后递归创建右子树，最后创建根结点。
二叉树的线索二叉树
线索二叉树（threaded binary tree），即对二叉树中的结点，除有左右孩子的指针外，增加一个指向其前驱和后继的指针。
线索化方法：
1.中序线索化：对二叉树进行中序遍历，当访问结点p时，根据p的左右孩子指针情况，确定对p进行线索化的方式。
2.后序线索化：对二叉树进行后序遍历，当访问结点p时，根据p的左右孩子指针情况，确定对p进行线索化的方式。
二叉树的二叉排序树
二叉排序树（binary sort tree），也称为二叉查找树（binary search tree）。
1.若左子树不为空，则左子树上所有结点的值均小于根结点的值。
2.若右子树不为空，则右子树上所有结点的值均大于根结点的值。
3.左右子树也为二叉排序树。
二叉排序树的创建：
1.若二叉排序树为空，则将插入的结点作为根结点。
2.若二叉排序树不为空，则比较插入的结点与根结点的值：
若插入的结点的值小于根结点的值，则将插入的结点插入到根结点的左子树中。
若插入的结点的值大于根结点的值，则将插入的结点插入到根结点的右子树中。
3.重复上述步骤，直到插入成功。
二叉排序树的查找：
1.若二叉排序树为空，则查找失败。
2.若二叉排序树不为空，则比较查找的结点与根结点的值：
若查找的结点的值等于根结点的值，则查找成功。
若查找的结点的值小于根结点的值，则查找左子树。
若查找的结点的值大于根结点的值，则查找右子树。
3.重复上述步骤，直到查找成功或查找失败。
二叉排序树的删除：
1.若二叉排序树为空，则删除失败。
2.若二叉排序树不为空，则比较删除的结点与根结点的值：
若删除的结点的值等于根结点的值，则删除根结点。
若删除的结点的值小于根结点的值，则删除左子树。
若删除的结点的值大于根结点的值，则删除右子树。
3.重复上述步骤，直到删除成功或删除失败。
二叉排序树的修改：
1.若二叉排序树为空，则修改失败。
2.若二叉排序树不为空，则比较修改的结点与根结点的值：
若修改的结点的值等于根结点的值，则修改根结点。
若修改的结点的值小于根结点的值，则修改左子树。
若修改的结点的值大于根结点的值，则修改右子树。
3.重复上述步骤，直到修改成功或修改失败。
二叉排序树的查找效率：
1.若二叉排序树为空，则查找失败。
2.若二叉排序树不为空，则比较查找的结点与根结点的值：
若查找的结点的值等于根结点的值，则查找成功。
若查找的结点的值小于根结点的值，则查找左子树。
若查找的结点的值大于根结点的值，则查找右子树。
3.重复上述步骤，直到查找成功或查找失败。
二叉排序树的查找效率：
1.若二叉排序树为空，则查找失败。
2.若二叉排序树不为空，则比较查找的结点与根结点的值：
若查找的结点的值等于根结点的值，则查找成功。
若查找的结点的值小于根结点的值，则查找左子树。
若查找的结点的值大于根结点的值，则查找右子树。
3.重复上述步骤，直到查找成功或查找失败。
二叉排序树的查找效率：
1.若二叉排序树为空，则查找失败。
2.若二叉排序树不为空，则比较查找的结点与根结点的值：
若查找的结点的值等于根结点的值，则查找成功。
若查找的结点的值小于根结点的值，则查找左子树。
若查找的结点的值大于根结点的值，则查找右子树。
3.重复上述步骤，直到查找成功或查找失败。
二叉排序树的查找效率：
1.若二叉排序树为空，则查找失败。
2.若二叉排序树不为空，则比较查找的结点与根结点的值：