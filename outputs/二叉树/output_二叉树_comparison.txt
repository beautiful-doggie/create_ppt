### 数据结构

- 数组

数组（Array）是最简单的数据结构，但它也有缺点，比如删除、插入操作需要移动大量元素。

数组的优点是，根据下标随机访问的时间复杂度为O(1)，这是数组能够高效支持随机访问的关键。

- 链表

链表（Linked List）是另外一种线性表，它内部的存储结构是分散的，通过指针来连接各个元素。

链表的缺点是，访问其中一个元素的耗时是O(n)，因为需要从头节点开始，依次访问n个节点。

- 栈（Stack）

栈是一种后进先出的数据结构（LIFO），只允许在一端插入和删除数据。

栈可以用来存储函数调用信息，比如函数的参数、返回地址和临时变量。

栈是递归的基础，在递归中，我们需要维护一个栈来存储函数调用信息。

- 队列（Queue）

队列是一种先进先出的数据结构（FIFO），允许在一端插入，另一端删除数据。

队列常用于处理多线程，或者并发编程中。

- 散列表（Hash）

散列表是根据关键码值而直接进行访问的数据结构，它通过把关键码值映射到表中一个位置来访问记录，以加快查找的速度。

散列表存储的是键值对，通过键可以快速的获取对应的值。

- 树（Tree）

树是一种数据结构，它是一种分层的数据模型，每个节点都有一个父节点和零个或多个子节点，除根节点外，每个节点都有且只有一个父节点。

树的所有节点可以通过一个根节点相连。

树可以用来描述任何类型的数据结构，比如文件系统、函数调用、计算机网络等。

- 图（Graph）

图是一种网络模型，由一系列顶点（Vertex）和边（Edge）组成，用来模拟现实世界中的物体之间的关系。

图可以用来表示任何数据结构，比如地图、社交网络等。

### 数据结构对比

| 数据结构 | 存储方式 | 读取 | 插入 | 删除 |
| --- | --- | --- | --- | --- |
| 数组 | 连续内存空间 | 随机访问 | 插入、删除 | 插入、删除 |
| 链表 | 零散内存空间 | 线性查找 | 插入、删除 | 插入、删除 |
| 树 | 零散内存空间 | 深度优先遍历 | 插入、删除 | 插入、删除 |
| 图 | 零散内存空间 | 广度优先遍历 | 插入、删除 | 插入、删除 |
| 栈 | 连续内存空间 | 访问栈顶元素 | 入栈 | 出栈 |
| 队列 | 连续内存空间 | 访问队列首元素 | 入队 | 出队 |
| 散列表 | 散列表 | 通过散列函数获取值 | 插入、删除 | 插入、删除 |